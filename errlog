kai@kais-laptop:~/Code/Jocoa$ make
g++ src/**/*.cpp -o jocoa
src/command/CommandBuilder.cpp:9:15: warning: extra tokens at end of #ifdef directive
    9 | #ifdef _WIN32 || __WINDOWS__
      |               ^~
src/command/CommandBuilder.cpp: In static member function ‘static std::string CommandBuilder::buildJavaCommand(JsonData)’:
src/command/CommandBuilder.cpp:33:1: warning: no return statement in function returning non-void [-Wreturn-type]
   33 | }
      | ^
./jocoa
Test

FROM 

#ifdef _WIN32 || __WINDOWS__
    #define OS_DELIMITER ";"
#elif __unix__ || __linux__
    #define OS_DELIMETER ":"
#endif

FIXED

kai@kais-laptop:~/Code/Jocoa$ make
g++ src/**/*.cpp -o jocoa
src/command/CommandBuilder.cpp: In static member function ‘static std::string CommandBuilder::buildJavaCommand(JsonData)’:
src/command/CommandBuilder.cpp:33:1: warning: no return statement in function returning non-void [-Wreturn-type]
   33 | }
      | ^
./jocoa
Test

WITH

#if defined(_WIN32) || defined(__WINDOWS__)
    #define OS_DELIMITER ";"
#elif defined(__unix__) || defined(__linux__)
    #define OS_DELIMETER ":"
#endif



------------------------------------------------------------------------------------------------



kai@kais-laptop:~/Code/Jocoa$ make
g++ src/**/*.cpp -o jocoa
src/command/CommandBuilder.cpp: In static member function ‘static std::string CommandBuilder::buildJavaCommand(JsonData)’:
src/command/CommandBuilder.cpp:33:1: warning: no return statement in function returning non-void [-Wreturn-type]
   33 | }
      | ^
./jocoa
Test

FROM

string CommandBuilder::buildJavaCommand(JsonData jsonData)
{
    string finalCommand = "java -cp .";
    finalCommand += OS_DELIMETER + jsonData.classpath;

    for (const auto &dependency : jsonData.dependencies) { finalCommand += OS_DELIMETER + dependency; }
    
    finalCommand += "-Djava.library.path=" + jsonData.natives + " main/Main";
}

FIXED

kai@kais-laptop:~/Code/Jocoa$ make
g++ src/**/*.cpp -o jocoa
./jocoa
Test

WITH

string CommandBuilder::buildJavaCommand(JsonData jsonData)
{
    string finalCommand = "java -cp .";
    finalCommand += OS_DELIMETER + jsonData.classpath;

    for (const auto &dependency : jsonData.dependencies) { finalCommand += OS_DELIMETER + dependency; }
    
    finalCommand += "-Djava.library.path=" + jsonData.natives + " main/Main";
    return finalCommand;
}



------------------------------------------------------------------------------------------------



kai@kais-laptop:~/Code/Jocoa$ make
g++ src/**/*.cpp -o jocoa
In file included from src/jocoa/Jocoa.cpp:3:
src/jocoa/../command/Commands.hpp:31:33: error: ‘string’ has not been declared
   31 |     static void createDirectory(string path);
      |                                 ^~~~~~
make: *** [Makefile:2: default] Error 1

FROM

class Commands
{
private:
    static void createDirectory(string path);

FIXED

kai@kais-laptop:~/Code/Jocoa$ make
g++ src/**/*.cpp -o jocoa
./jocoa
Test

WITH

#include <string>

using std::string;



------------------------------------------------------------------------------------------------



kai@kais-laptop:~/Code/Jocoa$ make linux
g++ src/**/*.cpp -o jocoa
sudo mv jocoa /usr/local/bin
[sudo] password for kai: 
kai@kais-laptop:~/Code/Jocoa$ cd test
kai@kais-laptop:~/Code/Jocoa/test$ ls
bin  build  jocoa.json  lib  res  src
kai@kais-laptop:~/Code/Jocoa/test$ cd ..
kai@kais-laptop:~/Code/Jocoa$ mkdir example
kai@kais-laptop:~/Code/Jocoa$ cd example/
kai@kais-laptop:~/Code/Jocoa/example$ jocoa new TestProject
kai@kais-laptop:~/Code/Jocoa/example$ ls

FROM

void Jocoa::runCommandFromArguments(char const *argv[])
{
    if (strcmp(argv[2], "run") == 0)
    {
        Commands::run(argv);
    }
    else if (strcmp(argv[2], "to-jar") == 0)
    {
        Commands::toJar(argv);
    }
    else if (strcmp(argv[2], "new") == 0)
    {
        Commands::_new(argv);
    }
    else if (strcmp(argv[2], "clean-up") == 0)
    {
        Commands::cleanUp(argv);
    }
    else if (strcmp(argv[2], "add-library") == 0)
    {
        Commands::addLibrary(argv);
    }
    else if (strcmp(argv[2], "remove-library") == 0)
    {
        Commands::removeLibrary(argv);
    }
    else if (strcmp(argv[2], "search-library") == 0)
    {
        Commands::searchLibrary(argv);
    }
}

TESTED

void Commands::_new(char const *argv[])
{
    // Get name from arguments
    string projectName = argv[2];
    // Get new project path
    string currentPath = std::filesystem::current_path().u8string() + OS_PATH_DELIMETER + projectName;

    // Create project directories
    createDirectory(currentPath);
    createDirectory(currentPath + OS_PATH_DELIMETER + "src" + OS_PATH_DELIMETER + "main");
    createDirectory(currentPath + OS_PATH_DELIMETER + "lib" + OS_PATH_DELIMETER + "natives");
    createDirectory(currentPath + OS_PATH_DELIMETER + "bin");

    cout << "Created directories!" << endl;

    // Create JSON file and write basic setup
    std::ofstream jsonFile(currentPath + OS_PATH_DELIMETER + "jocoa.json");
    jsonFile << "{\n\"projectName\": \"MyProject\",\n\"projectType\": \"Library | Program\",\n\"sourceFiles\": \n\n\n\"src/file1.java\"\n],\n\"dependencies\":\n\n\n\"lib/dependency1.jar\"\n],\n\n\"natives\": \"lib/natives\",\n\"classpath\": \"bin\"\n}";

    cout << "Created JSON file!" << endl;
}

RETURNED

kai@kais-laptop:~/Code/Jocoa/example$ jocoa new TestProject

FIXED

No output

WITH

void Jocoa::runCommandFromArguments(char const *argv[])
{
    if (strcmp(argv[1], "run") == 0)
    {
        Commands::run(argv);
    }
    else if (strcmp(argv[1], "to-jar") == 0)
    {
        Commands::toJar(argv);
    }
    else if (strcmp(argv[1], "new") == 0)
    {
        Commands::_new(argv);
    }
    else if (strcmp(argv[1], "clean-up") == 0)
    {
        Commands::cleanUp(argv);
    }
    else if (strcmp(argv[1], "add-library") == 0)
    {
        Commands::addLibrary(argv);
    }
    else if (strcmp(argv[1], "remove-library") == 0)
    {
        Commands::removeLibrary(argv);
    }
    else if (strcmp(argv[1], "search-library") == 0)
    {
        Commands::searchLibrary(argv);
    }
}



------------------------------------------------------------------------------------------------



kai@kais-laptop:~/Code/Jocoa/example$ jocoa new TestProject
Created '/home/kai/Code/Jocoa/example/TestProject'
terminate called after throwing an instance of 'std::filesystem::__cxx11::filesystem_error'
  what():  filesystem error: cannot create directory: No such file or directory [/home/kai/Code/Jocoa/example/TestProject/src/main]
Aborted (core dumped)
kai@kais-laptop:~/Code/Jocoa/example$ ls
TestProject

FROM

void Commands::_new(char const *argv[])
{
    // Get name from arguments
    string projectName = argv[2];
    // Get new project path
    string currentPath = std::filesystem::current_path().u8string() + OS_PATH_DELIMETER + projectName;

    // Create project directories
    createDirectory(currentPath);
    createDirectory(currentPath + OS_PATH_DELIMETER + "src" + OS_PATH_DELIMETER + "main");
    createDirectory(currentPath + OS_PATH_DELIMETER + "lib" + OS_PATH_DELIMETER + "natives");
    createDirectory(currentPath + OS_PATH_DELIMETER + "bin");

    cout << "Created directories!" << endl;

    // Create JSON file and write basic setup
    std::ofstream jsonFile(currentPath + OS_PATH_DELIMETER + "jocoa.json");
    jsonFile << "{\n\"projectName\": \"MyProject\",\n\"projectType\": \"Library | Program\",\n\"sourceFiles\": \n\n\n\"src/file1.java\"\n],\n\"dependencies\":\n\n\n\"lib/dependency1.jar\"\n],\n\n\"natives\": \"lib/natives\",\n\"classpath\": \"bin\"\n}";
    jsonFile.close();

    cout << "Created JSON file!" << endl;
}

FIXED

kai@kais-laptop:~/Code/Jocoa/example$ jocoa new Test
Created '/home/kai/Code/Jocoa/example/Test'
Created '/home/kai/Code/Jocoa/example/Test/src'
Created '/home/kai/Code/Jocoa/example/Test/src/main'
Created '/home/kai/Code/Jocoa/example/Test/lib'
Created '/home/kai/Code/Jocoa/example/Test/lib/natives'
Created '/home/kai/Code/Jocoa/example/Test/bin'
Created directories!
Created JSON file!
kai@kais-laptop:~/Code/Jocoa/example$ ls
Test
kai@kais-laptop:~/Code/Jocoa/example$ tree
.
└── Test
    ├── bin
    ├── jocoa.json
    ├── lib
    │   └── natives
    └── src
        └── main

WITH

void Commands::_new(char const *argv[])
{
    // Get name from arguments
    string projectName = argv[2];
    // Get new project path
    string currentPath = std::filesystem::current_path().u8string() + OS_PATH_DELIMETER + projectName;

    // Create project directories
    createDirectory(currentPath);
    createDirectory(currentPath + OS_PATH_DELIMETER + "src");
    createDirectory(currentPath + OS_PATH_DELIMETER + "src" + OS_PATH_DELIMETER + "main");
    createDirectory(currentPath + OS_PATH_DELIMETER + "lib");
    createDirectory(currentPath + OS_PATH_DELIMETER + "lib" + OS_PATH_DELIMETER + "natives");
    createDirectory(currentPath + OS_PATH_DELIMETER + "bin");

    cout << "Created directories!" << endl;

    // Create JSON file and write basic setup
    std::ofstream jsonFile(currentPath + OS_PATH_DELIMETER + "jocoa.json");
    jsonFile << "{\n\"projectName\": \"MyProject\",\n\"projectType\": \"Library | Program\",\n\"sourceFiles\": \n\n\n\"src/file1.java\"\n],\n\"dependencies\":\n\n\n\"lib/dependency1.jar\"\n],\n\n\"natives\": \"lib/natives\",\n\"classpath\": \"bin\"\n}";
    jsonFile.close();

    cout << "Created JSON file!" << endl;
}



.



{
"projectName": "MyProject",
"projectType": "Library | Program",
"sourceFiles": 


"src/file1.java"
],
"dependencies":


"lib/dependency1.jar"
],

"natives": "lib/natives",
"classpath": "bin"
}

FROM

// Create JSON file and write basic setup
std::ofstream jsonFile(currentPath + OS_PATH_DELIMETER + "jocoa.json");
jsonFile << ""
jsonFile.close();

FIXED

{
	"projectName": "MyProject",
	"projectType": "Library | Program",
	"sourceFiles": 
	[
		"src/file1.java"
	],
	"dependencies":
	[
		"lib/dependency1.jar"
	],
	"natives": "lib/natives",
	"classpath": "bin"
}

WITH

// Create JSON file and write basic setup
std::ofstream jsonFile(currentPath + OS_PATH_DELIMETER + "jocoa.json");
jsonFile << "{\n\t\"projectName\": \"MyProject\",\n\t\"projectType\": \"Library | Program\",\n\t\"sourceFiles\": \n\t[\n\t\t\"src/file1.java\"\n\t],\n\t\"dependencies\":\n\t[\n\t\t\"lib/dependency1.jar\"\n\t],\n\t\"natives\": \"lib/natives\",\n\t\"classpath\": \"bin\"\n}";
jsonFile.close();